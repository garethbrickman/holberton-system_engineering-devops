##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
# Nginx is set up to run on the standard HTTP port and listen for requests

# this specifies that there is a WSGI server running on port 5000
upstream app_server_gunicorn {
	  server localhost:5000 fail_timeout=0;
	   }

# this specifies that there is a WSGI server running on port 5001
upstream app_server_gunicorn_6 {
	  server localhost:5001 fail_timeout=0;
	   }

# this specifies that there is a WSGI server running on port 5002
upstream app_server_gunicorn_api {
	  server localhost:5002 fail_timeout=0;
	   }

server {
       listen 80 default_server;
       listen [::]:80 default_server;
       add_header X-Served-By 977-web-01;

       # SSL configuration
       #
       # listen 443 ssl default_server;
       # listen [::]:443 ssl default_server;
       #
       # Note: You should disable gzip for SSL traffic.
       # See: https://bugs.debian.org/773332
       #
       # Read up on ssl_ciphers to ensure a secure configuration.
       # See: https://bugs.debian.org/765782
       #
       # Self signed certs generated by the ssl-cert package
       # Don't use them in a production server!
       #
       # include snippets/snakeoil.conf;

       root /var/www/html;

       # Add index.php to the list if you are using PHP
       index index.html index.htm index.nginx-debian.html;

       server_name _;

       error_page 404 /custom_404.html;

       # nginx should serve up static files and never send to the WSGI server

       location /hbnb_static {
       		 alias /data/web_static/current/;
		 }
		 location /redirect_me {
		 	   return 301 $scheme://www.google.com;

			   # First attempt to serve request as file, then
			   # as directory, then fall back to displaying a 404.
			     try_files $uri $uri/ =404;
			     }

			     # requests that do not fall under /static are passed on to the WSGI

			     # server that was specified above running on port 5001
			     location /api/ {

			     proxy_pass http://app_server_gunicorn_api;

			     proxy_pass_request_headers on;
			     proxy_pass_request_body on;
			     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			     proxy_set_header X-Forwarded-Proto $scheme;
			     proxy_set_header Host $http_host;
			     proxy_redirect off;
			     }

			     # server that was specified above running on port 5001
			     location ^~ /airbnb-dynamic {

			     proxy_pass http://app_server_gunicorn_6/;

			     proxy_pass_request_headers on;
			     proxy_pass_request_body on;
			     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
			     proxy_set_header X-Forwarded-Proto $scheme;
			     proxy_set_header Host $http_host;
			     proxy_redirect off;
			     }

			     # server that was specified above running on port 5000
location /airbnb-onepage {
	 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
	 proxy_set_header Host $http_host;
	 proxy_redirect off;
	 try_files $uri @app_server;
	 }
location @app_server {
	 proxy_pass http://app_server_gunicorn;
        }
}

	# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
	#
	#location ~ \.php$ {
	#	  include snippets/fastcgi-php.conf;
	#
	#	# With php7.0-cgi alone:
	#	fastcgi_pass 127.0.0.1:9000;
	#	# With php7.0-fpm:
	#	fastcgi_pass unix:/run/php/php7.0-fpm.sock;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	  deny all;
	#}

# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		 try_files $uri $uri/ =404;
#		 }
#}